/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import java.math.BigDecimal;
import java.time.OffsetDateTime;

import jooq.tables.Activitylogs;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ActivitylogsRecord extends UpdatableRecordImpl<ActivitylogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.activitylogs.log_id</code>.
     */
    public ActivitylogsRecord setLogId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.activitylogs.log_id</code>.
     */
    public Integer getLogId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.activitylogs.item_id</code>.
     */
    public ActivitylogsRecord setItemId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.activitylogs.item_id</code>.
     */
    public Integer getItemId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.activitylogs.user_id</code>.
     */
    public ActivitylogsRecord setUserId(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.activitylogs.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.activitylogs.timestamp</code>.
     */
    public ActivitylogsRecord setTimestamp(OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.activitylogs.timestamp</code>.
     */
    public OffsetDateTime getTimestamp() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.activitylogs.quantity</code>.
     */
    public ActivitylogsRecord setQuantity(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.activitylogs.quantity</code>.
     */
    public BigDecimal getQuantity() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.activitylogs.lat</code>.
     */
    public ActivitylogsRecord setLat(BigDecimal value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.activitylogs.lat</code>.
     */
    public BigDecimal getLat() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>public.activitylogs.lng</code>.
     */
    public ActivitylogsRecord setLng(BigDecimal value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.activitylogs.lng</code>.
     */
    public BigDecimal getLng() {
        return (BigDecimal) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ActivitylogsRecord
     */
    public ActivitylogsRecord() {
        super(Activitylogs.ACTIVITYLOGS);
    }

    /**
     * Create a detached, initialised ActivitylogsRecord
     */
    public ActivitylogsRecord(Integer logId, Integer itemId, Integer userId, OffsetDateTime timestamp, BigDecimal quantity, BigDecimal lat, BigDecimal lng) {
        super(Activitylogs.ACTIVITYLOGS);

        setLogId(logId);
        setItemId(itemId);
        setUserId(userId);
        setTimestamp(timestamp);
        setQuantity(quantity);
        setLat(lat);
        setLng(lng);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ActivitylogsRecord
     */
    public ActivitylogsRecord(jooq.tables.pojos.Activitylogs value) {
        super(Activitylogs.ACTIVITYLOGS);

        if (value != null) {
            setLogId(value.getLogId());
            setItemId(value.getItemId());
            setUserId(value.getUserId());
            setTimestamp(value.getTimestamp());
            setQuantity(value.getQuantity());
            setLat(value.getLat());
            setLng(value.getLng());
            resetChangedOnNotNull();
        }
    }
}
