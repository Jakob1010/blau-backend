/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.Keys;
import jooq.Public;
import jooq.tables.Activities.ActivitiesPath;
import jooq.tables.Categories.CategoriesPath;
import jooq.tables.records.ActivitytemplatesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Activitytemplates extends TableImpl<ActivitytemplatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.activitytemplates</code>
     */
    public static final Activitytemplates ACTIVITYTEMPLATES = new Activitytemplates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivitytemplatesRecord> getRecordType() {
        return ActivitytemplatesRecord.class;
    }

    /**
     * The column <code>public.activitytemplates.template_id</code>.
     */
    public final TableField<ActivitytemplatesRecord, UUID> TEMPLATE_ID = createField(DSL.name("template_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.activitytemplates.category_id</code>.
     */
    public final TableField<ActivitytemplatesRecord, UUID> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.activitytemplates.name</code>.
     */
    public final TableField<ActivitytemplatesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.activitytemplates.description</code>.
     */
    public final TableField<ActivitytemplatesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.activitytemplates.default_quantity</code>.
     */
    public final TableField<ActivitytemplatesRecord, BigDecimal> DEFAULT_QUANTITY = createField(DSL.name("default_quantity"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.activitytemplates.emoji</code>.
     */
    public final TableField<ActivitytemplatesRecord, String> EMOJI = createField(DSL.name("emoji"), SQLDataType.VARCHAR(10), this, "");

    private Activitytemplates(Name alias, Table<ActivitytemplatesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Activitytemplates(Name alias, Table<ActivitytemplatesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.activitytemplates</code> table reference
     */
    public Activitytemplates(String alias) {
        this(DSL.name(alias), ACTIVITYTEMPLATES);
    }

    /**
     * Create an aliased <code>public.activitytemplates</code> table reference
     */
    public Activitytemplates(Name alias) {
        this(alias, ACTIVITYTEMPLATES);
    }

    /**
     * Create a <code>public.activitytemplates</code> table reference
     */
    public Activitytemplates() {
        this(DSL.name("activitytemplates"), null);
    }

    public <O extends Record> Activitytemplates(Table<O> path, ForeignKey<O, ActivitytemplatesRecord> childPath, InverseForeignKey<O, ActivitytemplatesRecord> parentPath) {
        super(path, childPath, parentPath, ACTIVITYTEMPLATES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ActivitytemplatesPath extends Activitytemplates implements Path<ActivitytemplatesRecord> {
        public <O extends Record> ActivitytemplatesPath(Table<O> path, ForeignKey<O, ActivitytemplatesRecord> childPath, InverseForeignKey<O, ActivitytemplatesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ActivitytemplatesPath(Name alias, Table<ActivitytemplatesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ActivitytemplatesPath as(String alias) {
            return new ActivitytemplatesPath(DSL.name(alias), this);
        }

        @Override
        public ActivitytemplatesPath as(Name alias) {
            return new ActivitytemplatesPath(alias, this);
        }

        @Override
        public ActivitytemplatesPath as(Table<?> alias) {
            return new ActivitytemplatesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ActivitytemplatesRecord> getPrimaryKey() {
        return Keys.ACTIVITYTEMPLATES_PKEY;
    }

    @Override
    public List<ForeignKey<ActivitytemplatesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACTIVITYTEMPLATES__ACTIVITYTEMPLATES_CATEGORY_ID_FKEY);
    }

    private transient CategoriesPath _categories;

    /**
     * Get the implicit join path to the <code>public.categories</code> table.
     */
    public CategoriesPath categories() {
        if (_categories == null)
            _categories = new CategoriesPath(this, Keys.ACTIVITYTEMPLATES__ACTIVITYTEMPLATES_CATEGORY_ID_FKEY, null);

        return _categories;
    }

    private transient ActivitiesPath _activities;

    /**
     * Get the implicit to-many join path to the <code>public.activities</code>
     * table
     */
    public ActivitiesPath activities() {
        if (_activities == null)
            _activities = new ActivitiesPath(this, null, Keys.ACTIVITIES__ACTIVITIES_TEMPLATE_ID_FKEY.getInverseKey());

        return _activities;
    }

    @Override
    public Activitytemplates as(String alias) {
        return new Activitytemplates(DSL.name(alias), this);
    }

    @Override
    public Activitytemplates as(Name alias) {
        return new Activitytemplates(alias, this);
    }

    @Override
    public Activitytemplates as(Table<?> alias) {
        return new Activitytemplates(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activitytemplates rename(String name) {
        return new Activitytemplates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activitytemplates rename(Name name) {
        return new Activitytemplates(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activitytemplates rename(Table<?> name) {
        return new Activitytemplates(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitytemplates where(Condition condition) {
        return new Activitytemplates(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitytemplates where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitytemplates where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitytemplates where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activitytemplates where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activitytemplates where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activitytemplates where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activitytemplates where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitytemplates whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitytemplates whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
