/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.Keys;
import jooq.Public;
import jooq.tables.Activities.ActivitiesPath;
import jooq.tables.Activitylogs.ActivitylogsPath;
import jooq.tables.Friendshiprequests.FriendshiprequestsPath;
import jooq.tables.Friendships.FriendshipsPath;
import jooq.tables.records.UsersRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>public.users.user_id</code>.
     */
    public final TableField<UsersRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.users.username</code>.
     */
    public final TableField<UsersRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.users.email</code>.
     */
    public final TableField<UsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.users.password</code>.
     */
    public final TableField<UsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.users.role</code>.
     */
    public final TableField<UsersRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.users.token</code>.
     */
    public final TableField<UsersRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.users.token_expiry</code>.
     */
    public final TableField<UsersRecord, LocalDateTime> TOKEN_EXPIRY = createField(DSL.name("token_expiry"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.users.created_at</code>.
     */
    public final TableField<UsersRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>public.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> Users(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
        super(path, childPath, parentPath, USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UsersPath extends Users implements Path<UsersRecord> {
        public <O extends Record> UsersPath(Table<O> path, ForeignKey<O, UsersRecord> childPath, InverseForeignKey<O, UsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UsersPath(Name alias, Table<UsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UsersPath as(String alias) {
            return new UsersPath(DSL.name(alias), this);
        }

        @Override
        public UsersPath as(Name alias) {
            return new UsersPath(alias, this);
        }

        @Override
        public UsersPath as(Table<?> alias) {
            return new UsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    @Override
    public List<UniqueKey<UsersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USERS_EMAIL_KEY, Keys.USERS_PASSWORD_KEY, Keys.USERS_ROLE_KEY, Keys.USERS_USERNAME_KEY);
    }

    private transient ActivitiesPath _activities;

    /**
     * Get the implicit to-many join path to the <code>public.activities</code>
     * table
     */
    public ActivitiesPath activities() {
        if (_activities == null)
            _activities = new ActivitiesPath(this, null, Keys.ACTIVITIES__ACTIVITIES_USER_ID_FKEY.getInverseKey());

        return _activities;
    }

    private transient ActivitylogsPath _activitylogs;

    /**
     * Get the implicit to-many join path to the
     * <code>public.activitylogs</code> table
     */
    public ActivitylogsPath activitylogs() {
        if (_activitylogs == null)
            _activitylogs = new ActivitylogsPath(this, null, Keys.ACTIVITYLOGS__ACTIVITYLOGS_USER_ID_FKEY.getInverseKey());

        return _activitylogs;
    }

    private transient FriendshiprequestsPath _friendshiprequestsReceiverIdFkey;

    /**
     * Get the implicit to-many join path to the
     * <code>public.friendshiprequests</code> table, via the
     * <code>friendshiprequests_receiver_id_fkey</code> key
     */
    public FriendshiprequestsPath friendshiprequestsReceiverIdFkey() {
        if (_friendshiprequestsReceiverIdFkey == null)
            _friendshiprequestsReceiverIdFkey = new FriendshiprequestsPath(this, null, Keys.FRIENDSHIPREQUESTS__FRIENDSHIPREQUESTS_RECEIVER_ID_FKEY.getInverseKey());

        return _friendshiprequestsReceiverIdFkey;
    }

    private transient FriendshiprequestsPath _friendshiprequestsSenderIdFkey;

    /**
     * Get the implicit to-many join path to the
     * <code>public.friendshiprequests</code> table, via the
     * <code>friendshiprequests_sender_id_fkey</code> key
     */
    public FriendshiprequestsPath friendshiprequestsSenderIdFkey() {
        if (_friendshiprequestsSenderIdFkey == null)
            _friendshiprequestsSenderIdFkey = new FriendshiprequestsPath(this, null, Keys.FRIENDSHIPREQUESTS__FRIENDSHIPREQUESTS_SENDER_ID_FKEY.getInverseKey());

        return _friendshiprequestsSenderIdFkey;
    }

    private transient FriendshipsPath _friendshipsUser1IdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.friendships</code>
     * table, via the <code>friendships_user1_id_fkey</code> key
     */
    public FriendshipsPath friendshipsUser1IdFkey() {
        if (_friendshipsUser1IdFkey == null)
            _friendshipsUser1IdFkey = new FriendshipsPath(this, null, Keys.FRIENDSHIPS__FRIENDSHIPS_USER1_ID_FKEY.getInverseKey());

        return _friendshipsUser1IdFkey;
    }

    private transient FriendshipsPath _friendshipsUser2IdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.friendships</code>
     * table, via the <code>friendships_user2_id_fkey</code> key
     */
    public FriendshipsPath friendshipsUser2IdFkey() {
        if (_friendshipsUser2IdFkey == null)
            _friendshipsUser2IdFkey = new FriendshipsPath(this, null, Keys.FRIENDSHIPS__FRIENDSHIPS_USER2_ID_FKEY.getInverseKey());

        return _friendshipsUser2IdFkey;
    }

    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    @Override
    public Users as(Table<?> alias) {
        return new Users(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Table<?> name) {
        return new Users(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition condition) {
        return new Users(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Users where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Users whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
