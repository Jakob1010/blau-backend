/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.Keys;
import jooq.Public;
import jooq.tables.Activitylogs.ActivitylogsPath;
import jooq.tables.Categories.CategoriesPath;
import jooq.tables.Users.UsersPath;
import jooq.tables.records.ActivitiesRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Activities extends TableImpl<ActivitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.activities</code>
     */
    public static final Activities ACTIVITIES = new Activities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivitiesRecord> getRecordType() {
        return ActivitiesRecord.class;
    }

    /**
     * The column <code>public.activities.item_id</code>.
     */
    public final TableField<ActivitiesRecord, UUID> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.activities.category_id</code>.
     */
    public final TableField<ActivitiesRecord, UUID> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.activities.user_id</code>.
     */
    public final TableField<ActivitiesRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.activities.name</code>.
     */
    public final TableField<ActivitiesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.activities.description</code>.
     */
    public final TableField<ActivitiesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private Activities(Name alias, Table<ActivitiesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Activities(Name alias, Table<ActivitiesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.activities</code> table reference
     */
    public Activities(String alias) {
        this(DSL.name(alias), ACTIVITIES);
    }

    /**
     * Create an aliased <code>public.activities</code> table reference
     */
    public Activities(Name alias) {
        this(alias, ACTIVITIES);
    }

    /**
     * Create a <code>public.activities</code> table reference
     */
    public Activities() {
        this(DSL.name("activities"), null);
    }

    public <O extends Record> Activities(Table<O> path, ForeignKey<O, ActivitiesRecord> childPath, InverseForeignKey<O, ActivitiesRecord> parentPath) {
        super(path, childPath, parentPath, ACTIVITIES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ActivitiesPath extends Activities implements Path<ActivitiesRecord> {
        public <O extends Record> ActivitiesPath(Table<O> path, ForeignKey<O, ActivitiesRecord> childPath, InverseForeignKey<O, ActivitiesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ActivitiesPath(Name alias, Table<ActivitiesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ActivitiesPath as(String alias) {
            return new ActivitiesPath(DSL.name(alias), this);
        }

        @Override
        public ActivitiesPath as(Name alias) {
            return new ActivitiesPath(alias, this);
        }

        @Override
        public ActivitiesPath as(Table<?> alias) {
            return new ActivitiesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ActivitiesRecord> getPrimaryKey() {
        return Keys.ACTIVITIES_PKEY;
    }

    @Override
    public List<ForeignKey<ActivitiesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACTIVITIES__ACTIVITIES_CATEGORY_ID_FKEY, Keys.ACTIVITIES__ACTIVITIES_USER_ID_FKEY);
    }

    private transient CategoriesPath _categories;

    /**
     * Get the implicit join path to the <code>public.categories</code> table.
     */
    public CategoriesPath categories() {
        if (_categories == null)
            _categories = new CategoriesPath(this, Keys.ACTIVITIES__ACTIVITIES_CATEGORY_ID_FKEY, null);

        return _categories;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.ACTIVITIES__ACTIVITIES_USER_ID_FKEY, null);

        return _users;
    }

    private transient ActivitylogsPath _activitylogs;

    /**
     * Get the implicit to-many join path to the
     * <code>public.activitylogs</code> table
     */
    public ActivitylogsPath activitylogs() {
        if (_activitylogs == null)
            _activitylogs = new ActivitylogsPath(this, null, Keys.ACTIVITYLOGS__ACTIVITYLOGS_ITEM_ID_FKEY.getInverseKey());

        return _activitylogs;
    }

    @Override
    public Activities as(String alias) {
        return new Activities(DSL.name(alias), this);
    }

    @Override
    public Activities as(Name alias) {
        return new Activities(alias, this);
    }

    @Override
    public Activities as(Table<?> alias) {
        return new Activities(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activities rename(String name) {
        return new Activities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activities rename(Name name) {
        return new Activities(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activities rename(Table<?> name) {
        return new Activities(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activities where(Condition condition) {
        return new Activities(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activities where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activities where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activities where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activities where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activities where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activities where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activities where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activities whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activities whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
