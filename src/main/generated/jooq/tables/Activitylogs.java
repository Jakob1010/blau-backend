/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.Keys;
import jooq.Public;
import jooq.tables.Activities.ActivitiesPath;
import jooq.tables.Users.UsersPath;
import jooq.tables.records.ActivitylogsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Activitylogs extends TableImpl<ActivitylogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.activitylogs</code>
     */
    public static final Activitylogs ACTIVITYLOGS = new Activitylogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivitylogsRecord> getRecordType() {
        return ActivitylogsRecord.class;
    }

    /**
     * The column <code>public.activitylogs.log_id</code>.
     */
    public final TableField<ActivitylogsRecord, UUID> LOG_ID = createField(DSL.name("log_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.activitylogs.item_id</code>.
     */
    public final TableField<ActivitylogsRecord, UUID> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.activitylogs.user_id</code>.
     */
    public final TableField<ActivitylogsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.activitylogs.timestamp</code>.
     */
    public final TableField<ActivitylogsRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.activitylogs.quantity</code>.
     */
    public final TableField<ActivitylogsRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.activitylogs.lat</code>.
     */
    public final TableField<ActivitylogsRecord, BigDecimal> LAT = createField(DSL.name("lat"), SQLDataType.NUMERIC(10, 6).nullable(false), this, "");

    /**
     * The column <code>public.activitylogs.lng</code>.
     */
    public final TableField<ActivitylogsRecord, BigDecimal> LNG = createField(DSL.name("lng"), SQLDataType.NUMERIC(10, 6).nullable(false), this, "");

    private Activitylogs(Name alias, Table<ActivitylogsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Activitylogs(Name alias, Table<ActivitylogsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.activitylogs</code> table reference
     */
    public Activitylogs(String alias) {
        this(DSL.name(alias), ACTIVITYLOGS);
    }

    /**
     * Create an aliased <code>public.activitylogs</code> table reference
     */
    public Activitylogs(Name alias) {
        this(alias, ACTIVITYLOGS);
    }

    /**
     * Create a <code>public.activitylogs</code> table reference
     */
    public Activitylogs() {
        this(DSL.name("activitylogs"), null);
    }

    public <O extends Record> Activitylogs(Table<O> path, ForeignKey<O, ActivitylogsRecord> childPath, InverseForeignKey<O, ActivitylogsRecord> parentPath) {
        super(path, childPath, parentPath, ACTIVITYLOGS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ActivitylogsPath extends Activitylogs implements Path<ActivitylogsRecord> {
        public <O extends Record> ActivitylogsPath(Table<O> path, ForeignKey<O, ActivitylogsRecord> childPath, InverseForeignKey<O, ActivitylogsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ActivitylogsPath(Name alias, Table<ActivitylogsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ActivitylogsPath as(String alias) {
            return new ActivitylogsPath(DSL.name(alias), this);
        }

        @Override
        public ActivitylogsPath as(Name alias) {
            return new ActivitylogsPath(alias, this);
        }

        @Override
        public ActivitylogsPath as(Table<?> alias) {
            return new ActivitylogsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ActivitylogsRecord> getPrimaryKey() {
        return Keys.ACTIVITYLOGS_PKEY;
    }

    @Override
    public List<ForeignKey<ActivitylogsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACTIVITYLOGS__ACTIVITYLOGS_ITEM_ID_FKEY, Keys.ACTIVITYLOGS__ACTIVITYLOGS_USER_ID_FKEY);
    }

    private transient ActivitiesPath _activities;

    /**
     * Get the implicit join path to the <code>public.activities</code> table.
     */
    public ActivitiesPath activities() {
        if (_activities == null)
            _activities = new ActivitiesPath(this, Keys.ACTIVITYLOGS__ACTIVITYLOGS_ITEM_ID_FKEY, null);

        return _activities;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.ACTIVITYLOGS__ACTIVITYLOGS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public Activitylogs as(String alias) {
        return new Activitylogs(DSL.name(alias), this);
    }

    @Override
    public Activitylogs as(Name alias) {
        return new Activitylogs(alias, this);
    }

    @Override
    public Activitylogs as(Table<?> alias) {
        return new Activitylogs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activitylogs rename(String name) {
        return new Activitylogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activitylogs rename(Name name) {
        return new Activitylogs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activitylogs rename(Table<?> name) {
        return new Activitylogs(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitylogs where(Condition condition) {
        return new Activitylogs(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitylogs where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitylogs where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitylogs where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activitylogs where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activitylogs where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activitylogs where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Activitylogs where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitylogs whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Activitylogs whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
