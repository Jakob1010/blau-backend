/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.Keys;
import jooq.Public;
import jooq.tables.Users.UsersPath;
import jooq.tables.records.FriendshipsRecord;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Friendships extends TableImpl<FriendshipsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.friendships</code>
     */
    public static final Friendships FRIENDSHIPS = new Friendships();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FriendshipsRecord> getRecordType() {
        return FriendshipsRecord.class;
    }

    /**
     * The column <code>public.friendships.friendship_id</code>.
     */
    public final TableField<FriendshipsRecord, UUID> FRIENDSHIP_ID = createField(DSL.name("friendship_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.friendships.user1_id</code>.
     */
    public final TableField<FriendshipsRecord, UUID> USER1_ID = createField(DSL.name("user1_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.friendships.user2_id</code>.
     */
    public final TableField<FriendshipsRecord, UUID> USER2_ID = createField(DSL.name("user2_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.friendships.created_at</code>.
     */
    public final TableField<FriendshipsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Friendships(Name alias, Table<FriendshipsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Friendships(Name alias, Table<FriendshipsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.friendships</code> table reference
     */
    public Friendships(String alias) {
        this(DSL.name(alias), FRIENDSHIPS);
    }

    /**
     * Create an aliased <code>public.friendships</code> table reference
     */
    public Friendships(Name alias) {
        this(alias, FRIENDSHIPS);
    }

    /**
     * Create a <code>public.friendships</code> table reference
     */
    public Friendships() {
        this(DSL.name("friendships"), null);
    }

    public <O extends Record> Friendships(Table<O> path, ForeignKey<O, FriendshipsRecord> childPath, InverseForeignKey<O, FriendshipsRecord> parentPath) {
        super(path, childPath, parentPath, FRIENDSHIPS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FriendshipsPath extends Friendships implements Path<FriendshipsRecord> {
        public <O extends Record> FriendshipsPath(Table<O> path, ForeignKey<O, FriendshipsRecord> childPath, InverseForeignKey<O, FriendshipsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FriendshipsPath(Name alias, Table<FriendshipsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FriendshipsPath as(String alias) {
            return new FriendshipsPath(DSL.name(alias), this);
        }

        @Override
        public FriendshipsPath as(Name alias) {
            return new FriendshipsPath(alias, this);
        }

        @Override
        public FriendshipsPath as(Table<?> alias) {
            return new FriendshipsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<FriendshipsRecord> getPrimaryKey() {
        return Keys.FRIENDSHIPS_PKEY;
    }

    @Override
    public List<UniqueKey<FriendshipsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_FRIENDSHIP);
    }

    @Override
    public List<ForeignKey<FriendshipsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FRIENDSHIPS__FRIENDSHIPS_USER1_ID_FKEY, Keys.FRIENDSHIPS__FRIENDSHIPS_USER2_ID_FKEY);
    }

    private transient UsersPath _friendshipsUser1IdFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>friendships_user1_id_fkey</code> key.
     */
    public UsersPath friendshipsUser1IdFkey() {
        if (_friendshipsUser1IdFkey == null)
            _friendshipsUser1IdFkey = new UsersPath(this, Keys.FRIENDSHIPS__FRIENDSHIPS_USER1_ID_FKEY, null);

        return _friendshipsUser1IdFkey;
    }

    private transient UsersPath _friendshipsUser2IdFkey;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>friendships_user2_id_fkey</code> key.
     */
    public UsersPath friendshipsUser2IdFkey() {
        if (_friendshipsUser2IdFkey == null)
            _friendshipsUser2IdFkey = new UsersPath(this, Keys.FRIENDSHIPS__FRIENDSHIPS_USER2_ID_FKEY, null);

        return _friendshipsUser2IdFkey;
    }

    @Override
    public List<Check<FriendshipsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("user1_lt_user2"), "((user1_id < user2_id))", true)
        );
    }

    @Override
    public Friendships as(String alias) {
        return new Friendships(DSL.name(alias), this);
    }

    @Override
    public Friendships as(Name alias) {
        return new Friendships(alias, this);
    }

    @Override
    public Friendships as(Table<?> alias) {
        return new Friendships(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Friendships rename(String name) {
        return new Friendships(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Friendships rename(Name name) {
        return new Friendships(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Friendships rename(Table<?> name) {
        return new Friendships(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Friendships where(Condition condition) {
        return new Friendships(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Friendships where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Friendships where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Friendships where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Friendships where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Friendships where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Friendships where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Friendships where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Friendships whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Friendships whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
