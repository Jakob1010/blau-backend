name: CI Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: [self-hosted, linux]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install dependencies
        run: ./gradlew build --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon

      - name: Build JAR file
        run: ./gradlew bootJar --no-daemon

      - name: Verify JAR file exists
        run: |
          if [ ! -f build/libs/*.jar ]; then
            echo "JAR file not found!"
            exit 1
          else
            echo "JAR file found!"
          fi

      - name: Deploy application
        run: |
          # Define paths
          JAR_FILE=$(realpath build/libs/*SNAPSHOT.jar)
          DEPLOY_DIR=$(realpath /root/depl/backend)

          # Create deploy directory if it doesn't exist
          mkdir -p $DEPLOY_DIR

          # Stop existing application
          if [ -f $DEPLOY_DIR/app.pid ]; then
            PID=$(cat $DEPLOY_DIR/app.pid)
            echo "Stopping application with PID $PID"
            kill $PID || echo "Application not running"
          fi

          # Copy new JAR to deployment directory
          echo "$DEPLOY_DIR $JAR_FILE"
          cp $JAR_FILE $DEPLOY_DIR/app.jar

          # Start the application in the background
          nohup java -jar $DEPLOY_DIR/app.jar > $DEPLOY_DIR/app.log 2>&1 &

          # Save the process ID
          echo $! > $DEPLOY_DIR/app.pid

          echo "Application deployed and started successfully."
